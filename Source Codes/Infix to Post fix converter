class Stack
{
private int maxSize;
private char[] S;
private int top;  
public Stack()
{
maxSize = 10;
S = new char[maxSize]; 
top = -1;
}
public void push(char j)
{
if(isFull())
{
  System.out.println("Stack is full");
}
else
S[++top] = j;
}
public char pop()
{
if(isEmpty()){
System.out.println("Stack is Empty"); 
return '0';
}
else
return S[top--]; 
}

public char topelement()
{ if (!isEmpty())
return S[top];
else return '0';
}
public boolean isEmpty()
{
return (top == -1);
}
public boolean isFull()
{
return (top == maxSize-1);
}
} 

public class InfixtoPostfixConverter
{

  static boolean isOperand(char ch)
{
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}
 
static int Prec(char ch)
{
    switch (ch)
    {
    case '+':
    case '-':
        return 1;
 
    case '*':
    case '/':
        return 2;
 
    case '^':
        return 3;
    }
    return -1;
}
 
static void infixToPostfix(String exp)
{
    int  i, k;
    Stack St= new Stack();    
    
    for (i = 0;i<exp.length(); ++i)
    {

        if (isOperand(exp.charAt(i)))
             System.out.print(exp.charAt(i));
         
     
        else if (exp.charAt(i) == '(')
            St.push(exp.charAt(i));
         
        
        else if (exp.charAt(i)== ')')
        {
            while (!St.isEmpty() && St.topelement() != '(')
                System.out.print(St.pop());
                St.pop();
        }
        else 
        { char f=St.topelement(); 
           char f2=exp.charAt(i);  
            while (!St.isEmpty() && (Prec(f2) <= Prec(f)))
                System.out.print(St.pop());
            St.push(exp.charAt(i));
        }
 
    }
 
   
    while (!St.isEmpty())
          System.out.print(St.pop());
}
 

public static void  main(String args[])
{
    String  exp = "a+b*(c+d)";
    infixToPostfix(exp);
  
     }
}







